# Date: March 11 2021
# Euler 1: Multiples of 3 and 5
# Problem: If we list all the natural numbers below 10 that are
# multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
# Find the sum of all the multiples of 3 or 5 below 1000.

'''
sum1 = 0
sum2 = 0
for num in range(3,1000):
    if num % 3 == 0:
        sum1 += num
    if num % 5 == 0 and num % 3 != 0:
        sum2 += num

total = sum1 + sum2

print(total)
'''


# Date: March 11 2021
# Euler 2: Even Fibonacci numbers
# Problem: Each new term in the Fibonacci sequence is generated by adding
# the previous two terms. By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#
# By considering the terms in the Fibonacci sequence whose values do not exceed four million,
# find the sum of the even-valued terms.

'''
fib = 1
i = 0
temp = [0]
sum = 0
while fib < 4000000:
    temp.append(fib)
    fib = temp[i] + fib
    i += 1
    if fib % 2 == 0:
        sum += fib

print(sum)
'''

# Date: March 12 2021
# Euler 3: Largest prime factor
# Problem: The prime factors of 13195 are 5, 7, 13 and 29.
# What is the largest prime factor of the number 600851475143 ?

'''
num = 600851475143
arr_fac = []
i = 0
count = 2
while num > 1:
    if num % count == 0:
        arr_fac.append(count)
        num = num // count
        i += 1
    count += 1

print(arr_fac[len(arr_fac)-1])
'''

# Date: March 14 2021
# Euler 4: Largest palindrome product
# Problem: A palindromic number reads the same both ways. The largest
# palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
# Find the largest palindrome made from the product of two 3-digit numbers.


'''
first = 999
palindrome_arr = []
while first > 99:
    for second in range(999,100,-1):
        result = first * second
        result_str = str(result)
        str_length = len(result_str)
        result_str_reversed = result_str[::-1]
        if result_str[0:str_length//2] == result_str_reversed[0:str_length//2]:
           palindrome_arr.append(result)

    first -= 1

print(max(palindrome_arr))
'''

# Date: March 14 2021
# Euler 5: Smallest multiple
# Problem: 2520 is the smallest number that can be divided by each of the numbers
# from 1 to 10 without any remainder. What is the smallest positive number that is
# evenly divisible by all of the numbers from 1 to 20?


'''
num = 2520 * 11 * 13 * 17 * 19

count = 0
while num > 1:
    for i in range(11,21):
        if num % i == 0:
            count += 1
    if count == 10:
        break
    num += 1
    count = 0
print(num)
'''

# Date: March 14 2021
# Euler 6: Sum square difference
# Problem: The sum of the squares of the first ten natural numbers is:
# 1^2 + 2^2 + ... + 10^2 = 355
#
# The square of the sum of the first ten natural numbers is:
# (1 + 2 + ... + 10)^2 = 55^2 = 3025
# Hence the difference between the sum of the squares of the first ten natural
# numbers and the square of the sum is: 3025 - 385 = 2640
#
# Find the difference between the sum of the squares of the first one hundred
# natural numbers and the square of the sum.


# we should use n*(n+1)/2

'''
sum1 = 0
for i in range(1, 101):
    sum1 += i*i

sum2 = (100*101//2)*(100*101//2)

diff = sum2 - sum1

print(diff)
'''

# Date: March 15 2021
# Euler 7: 10001st prime
# Problem: By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13,
# we can see that the 6th prime is 13. What is the 10 001st prime number?

'''
arr = [1,2]
i = 3
count = 0
while len(arr) < 10002:
    for j in arr:
        if i%j != 0:
            count += 1
    if count == len(arr) - 1:
        arr.append(i)
    count = 0
    i += 1

print(arr[10001])
'''

# Date: March 16 2021
# Euler 8: Largest product in a series
# Problem: The four adjacent digits in the 1000-digit number that have
# the greatest product are 9 × 9 × 8 × 9 = 5832.

# 73167176531330624919225119674426574742355349194934
# 96983520312774506326239578318016984801869478851843
# 85861560789112949495459501737958331952853208805511
# 12540698747158523863050715693290963295227443043557
# 66896648950445244523161731856403098711121722383113
# 62229893423380308135336276614282806444486645238749
# 30358907296290491560440772390713810515859307960866
# 70172427121883998797908792274921901699720888093776
# 65727333001053367881220235421809751254540594752243
# 52584907711670556013604839586446706324415722155397
# 53697817977846174064955149290862569321978468622482
# 83972241375657056057490261407972968652414535100474
# 82166370484403199890008895243450658541227588666881
# 16427171479924442928230863465674813919123162824586
# 17866458359124566529476545682848912883142607690042
# 24219022671055626321111109370544217506941658960408
# 07198403850962455444362981230987879927244284909188
# 84580156166097919133875499200524063689912560717606
# 05886116467109405077541002256983155200055935729725
# 71636269561882670428252483600823257530420752963450

# Find the thirteen adjacent digits in the 1000-digit number that
# have the greatest product. What is the value of this product?

num_str = '731671765313306249192251196744265747423553491949349698352031277450632623957831801698480186947885184385861560' \
          '789112949495459501737958331952853208805511125406987471585238630507156932909632952274430435576689664895044524' \
          '4523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077' \
          '2390713810515859307960866701724271218839987979087922749219016997208880937766572733300105336788122023542180975' \
          '1254540594752243525849077116705560136048395864467063244157221553975369781797784617406495514929086256932197846' \
          '8622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116' \
          '4271714799244429282308634656748139191231628245861786645835912456652947654568284891288314260769004224219022671' \
          '0556263211111093705442175069416589604080719840385096245544436298123098787992724428490918884580156166097919133' \
          '8754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600' \
          '823257530420752963450'

product = 1
arr_max = []
j = 0
while j < len(num_str):
    window = num_str[j:j+13]
    for i in window:
        product *= int(i)
    arr_max.append(product)
    product = 1
    j += 1

print(max(arr_max))
