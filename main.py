# Date: March 11 2021
# Euler 1: Multiples of 3 and 5
# Problem: If we list all the natural numbers below 10 that are
# multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
# Find the sum of all the multiples of 3 or 5 below 1000.

'''
sum1 = 0
sum2 = 0
for num in range(3,1000):
    if num % 3 == 0:
        sum1 += num
    if num % 5 == 0 and num % 3 != 0:
        sum2 += num

total = sum1 + sum2

print(total)
'''


# Date: March 11 2021
# Euler 2: Even Fibonacci numbers
# Problem: Each new term in the Fibonacci sequence is generated by adding
# the previous two terms. By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#
# By considering the terms in the Fibonacci sequence whose values do not exceed four million,
# find the sum of the even-valued terms.

'''
fib = 1
i = 0
temp = [0]
sum = 0
while fib < 4000000:
    temp.append(fib)
    fib = temp[i] + fib
    i += 1
    if fib % 2 == 0:
        sum += fib

print(sum)
'''

# Date: March 12 2021
# Euler 3: Largest prime factor
# Problem: The prime factors of 13195 are 5, 7, 13 and 29.
# What is the largest prime factor of the number 600851475143 ?

'''
num = 600851475143
arr_fac = []
i = 0
count = 2
while num > 1:
    if num % count == 0:
        arr_fac.append(count)
        num = num // count
        i += 1
    count += 1

print(arr_fac[len(arr_fac)-1])
'''

# Date: March 14 2021
# Euler 4: Largest palindrome product
# Problem: A palindromic number reads the same both ways. The largest
# palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
# Find the largest palindrome made from the product of two 3-digit numbers.


'''
first = 999
palindrome_arr = []
while first > 99:
    for second in range(999,100,-1):
        result = first * second
        result_str = str(result)
        str_length = len(result_str)
        result_str_reversed = result_str[::-1]
        if result_str[0:str_length//2] == result_str_reversed[0:str_length//2]:
           palindrome_arr.append(result)

    first -= 1

print(max(palindrome_arr))
'''

# Date: March 14 2021
# Euler 5: Smallest multiple
# Problem: 2520 is the smallest number that can be divided by each of the numbers
# from 1 to 10 without any remainder. What is the smallest positive number that is
# evenly divisible by all of the numbers from 1 to 20?


'''
num = 2520 * 11 * 13 * 17 * 19

count = 0
while num > 1:
    for i in range(11,21):
        if num % i == 0:
            count += 1
    if count == 10:
        break
    num += 1
    count = 0
print(num)
'''

# Date: March 14 2021
# Euler 6: Sum square difference
# Problem: The sum of the squares of the first ten natural numbers is:
# 1^2 + 2^2 + ... + 10^2 = 355
#
# The square of the sum of the first ten natural numbers is:
# (1 + 2 + ... + 10)^2 = 55^2 = 3025
# Hence the difference between the sum of the squares of the first ten natural
# numbers and the square of the sum is: 3025 - 385 = 2640
#
# Find the difference between the sum of the squares of the first one hundred
# natural numbers and the square of the sum.


# we should use n*(n+1)/2

'''
sum1 = 0
for i in range(1, 101):
    sum1 += i*i

sum2 = (100*101//2)*(100*101//2)

diff = sum2 - sum1

print(diff)
'''

# Date: March 15 2021
# Euler 7: 10001st prime
# Problem: By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13,
# we can see that the 6th prime is 13. What is the 10 001st prime number?

'''
arr = [1,2]
i = 3
count = 0
while len(arr) < 10002:
    for j in arr:
        if i%j != 0:
            count += 1
    if count == len(arr) - 1:
        arr.append(i)
    count = 0
    i += 1

print(arr[10001])
'''

# Date: March 16 2021
# Euler 8: Largest product in a series
# Problem: The four adjacent digits in the 1000-digit number that have
# the greatest product are 9 × 9 × 8 × 9 = 5832.

# 73167176531330624919225119674426574742355349194934
# 96983520312774506326239578318016984801869478851843
# 85861560789112949495459501737958331952853208805511
# 12540698747158523863050715693290963295227443043557
# 66896648950445244523161731856403098711121722383113
# 62229893423380308135336276614282806444486645238749
# 30358907296290491560440772390713810515859307960866
# 70172427121883998797908792274921901699720888093776
# 65727333001053367881220235421809751254540594752243
# 52584907711670556013604839586446706324415722155397
# 53697817977846174064955149290862569321978468622482
# 83972241375657056057490261407972968652414535100474
# 82166370484403199890008895243450658541227588666881
# 16427171479924442928230863465674813919123162824586
# 17866458359124566529476545682848912883142607690042
# 24219022671055626321111109370544217506941658960408
# 07198403850962455444362981230987879927244284909188
# 84580156166097919133875499200524063689912560717606
# 05886116467109405077541002256983155200055935729725
# 71636269561882670428252483600823257530420752963450

# Find the thirteen adjacent digits in the 1000-digit number that
# have the greatest product. What is the value of this product?

'''
num_str = '731671765313306249192251196744265747423553491949349698352031277450632623957831801698480186947885184385861560' \
          '789112949495459501737958331952853208805511125406987471585238630507156932909632952274430435576689664895044524' \
          '4523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077' \
          '2390713810515859307960866701724271218839987979087922749219016997208880937766572733300105336788122023542180975' \
          '1254540594752243525849077116705560136048395864467063244157221553975369781797784617406495514929086256932197846' \
          '8622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116' \
          '4271714799244429282308634656748139191231628245861786645835912456652947654568284891288314260769004224219022671' \
          '0556263211111093705442175069416589604080719840385096245544436298123098787992724428490918884580156166097919133' \
          '8754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600' \
          '823257530420752963450'

product = 1
arr_max = []
j = 0
while j < len(num_str):
    window = num_str[j:j+13]
    for i in window:
        product *= int(i)
    arr_max.append(product)
    product = 1
    j += 1

print(max(arr_max))
'''

# Date: March 19 2021
# Euler 9: Special Pythagorean triplet
# A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
#
# a^2 + b^2 = c^2
# For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.
#
# There exists exactly one Pythagorean triplet for which a + b + c = 1000.
# Find the product abc.

'''
import math

first_arr = []
for i in range(2,1000):
    if i*i < 1000*1000:
        first_arr.append(i*i)

for i in range(0,len(first_arr)):
    for j in range(i+1, len(first_arr)):
        a = math.sqrt(first_arr[i])
        b = math.sqrt(first_arr[j])
        c = math.sqrt(first_arr[i] + first_arr[j])
        if a+b+c == 1000:
            print(a, b, c, 'product is: ', a*b*c)

'''

# Date: March 21 2021
# Euler 10: Summation of primes
# The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
# Find the sum of all the primes below two million.
# Here we use the fact that a prime number is not divisible
# by prime numbers smaller than its square root.

'''
import math

arr = [2]
sum = 2
i = 3
count = 0
while i <2000000:
    for j in arr:
        if i%j == 0:
            count += 1
    if count == 0:
        num = math.ceil(math.sqrt(i))
        if num not in arr:
            arr.append(num)
        sum = sum + i
    count = 0
    i += 1

print(sum)
'''

# Date: March 23 2021
# Euler 11: Largest product in a grid
# In the 20×20 grid below, four numbers along a diagonal line have been marked in red.
#
# 08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08 -1
# 49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00 -2
# 81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65 -3
# 52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91 -4
# 22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80 -5
# 24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50 -6
# 32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70 -7
# 67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21 -8
# 24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72 -9
# 21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95 -10
# 78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92 -11
# 16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57 -12
# 86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58 -13
# 19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40 -14
# 04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66 -15
# 88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69 -16
# 04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36 -17
# 20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16 -18
# 20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54 -19
# 01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48 -20
#
# The product of these numbers is 26 × 63 × 78 × 14 = 1788696.
#
# What is the greatest product of four adjacent numbers in the same
# direction (up, down, left, right, or diagonally) in the 20×20 grid?


grid = [
       "08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08",
       "49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00",
       "81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65",
       "52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91",
       "22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80",
       "24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50",
       "32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70",
       "67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21",
       "24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72",
       "21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95",
       "78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92",
       "16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57",
       "86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58",
       "19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40",
       "04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66",
       "88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69",
       "04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36",
       "20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16",
       "20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54",
       "01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48"
       ]

arr = []
new_grid = []
for row in grid:
    new_row = row.split(" ")
    for c in new_row:
        arr.append(int(c))
    new_grid.append(arr)
    arr = []
max_num = 0
for i in range(0, len(new_grid)-3):
    for j in range(0, len(new_grid)-3):
        max1 = new_grid[i][j] * new_grid[i][j + 1] * new_grid[i][j + 2] * new_grid[i][j + 3]
        max2 = new_grid[i][j] * new_grid[j+1][i] * new_grid[j+2][i] * new_grid[j+3][i]
        max3 = new_grid[i][j] * new_grid[i+1][j + 1] * new_grid[i+2][j + 2] * new_grid[i+3][j + 3]
        max4 = new_grid[i][j+3] * new_grid[i + 1][j + 2] * new_grid[i + 2][j + 1] * new_grid[i + 3][j]

        if max_num < max1:
            max_num = max1
        if max_num < max2:
            max_num = max2
        if max_num < max3:
            max_num = max3
        if max_num < max4:
            max_num = max4

print(max_num)





